Spreadsheets
	- Many datasets are stored in spreadsheets. A spreadsheet is essentially a file version of a data frame with rows and columns.
	- Spreadsheets have rows separated by returns and columns separated by a delimiter. The most common delimiters are comma, semicolon, white space and tab.
	- Many spreadsheets are raw text files and can be read with any basic text editor. However, some formats are proprietary and cannot be read with a text editor, such as Microsoft Excel files (.xls).
	- Most import functions assume that the first row of a spreadsheet file is a header with column names. To know if the file has a header, it helps to look at the file with a text editor before trying to import it.

Paths and the Working Directory
	- getwd() --> Get Working Directory
	- setwd() --> Changing Working Directory
	
	# set path to the location for raw data files in the dslabs package and list files
		path <- system.file("extdata", package="dslabs")
		list.files(path)
	# generate a full path to a file
		filename <- "murders.csv"
		fullpath <- file.path(path, filename)
		fullpath
	# copy file from dslabs package to your working directory
		file.copy(fullpath, getwd())
	# check if the file exists
		file.exists(filename)

The readr and readxl Packages
	- readr is the tidyverse library that includes functions for reading data stored in text file spreadsheets into R. Functions in the package include read_csv(), read_tsv(), read_delim() and more. These differ by the delimiter they use to split columns.
	- The readxl package provides functions to read Microsoft Excel formatted files.
	- The excel_sheets() function gives the names of the sheets in the Excel file. These names are passed to the sheet argument for the readxl functions read_excel(), read_xls() and read_xlsx().
	- The read_lines() function shows the first few lines of a file in R.

		library(dslabs)
		library(tidyverse)    # includes readr
		library(readxl)
		# inspect the first 3 lines
		read_lines("murders.csv", n_max = 3)
		# read file in CSV format
		dat <- read_csv(filename)
		#read using full path
		dat <- read_csv(fullpath)
		#Exï¼š
		path <- system.file("extdata", package = "dslabs")
		files <- list.files(path)
		files
		filename <- "murders.csv"
		dat=read.csv(file.path(path, filename))

Importing Data Using R-base Functions
	- R-base import functions (read.csv(), read.table(), read.delim()) generate data frames rather than tibbles and character variables are converted to factors. This can be avoided by setting the argument stringsAsFactors=FALSE.
		# filename is defined in the previous video
		# read.csv converts strings to factors
		dat2 <- read.csv(filename)
		class(dat2$abb)
		class(dat2$region)

Downloading Files from the Internet
	- The read_csv() function and other import functions can read a URL directly.
	- If you want to have a local copy of the file, you can use download.file().
	- tempdir() creates a directory with a name that is very unlikely not to be unique.
	- tempfile() creates a character string that is likely to be a unique filename.
		url <- "https://raw.githubusercontent.com/rafalab/dslabs/master/inst/extdata/murders.csv"
		dat <- read_csv(url)
		download.file(url, "murders.csv")
		tempfile()
		tmp_filename <- tempfile()
		download.file(url, tmp_filename)
		dat <- read_csv(tmp_filename)
		file.remove(tmp_filename)

Tidy Data
	- In tidy data, each row represents an observation and each column represents a different variable.
	- In wide data, each row includes several observations and one of the variables is stored in the header.

Reshaping Data
	- The tidyr package includes several functions that are useful for tidying data.
	- The gather() function converts wide data into tidy data.
		-- The first argument sets the name of the column that will hold the variable that are currently kept in the wide data column names. (e.g. year)
		-- The second argument sets the column name for the column that will hold the values in the column cells.
		-- The third argument of the gather function specifies the columns that will be gathered. The default behavior for the gather function is to gather all the columns.
		-- e.g. 	# gather wide data to make new tidy data
					new_tidy_data <- wide_data %>%
					  gather(year, fertility, `1960`:`2015`)
					head(new_tidy_data)

					# gather all columns except country
					new_tidy_data <- wide_data %>%
					  gather(year, fertility, -country)

					# gather treats column names as characters by default
					class(tidy_data$year)
					class(new_tidy_data$year)

					# convert gathered column names to numeric
					new_tidy_data <- wide_data %>%
					  gather(year, fertility, -country, convert = TRUE)
					class(new_tidy_data$year)
	- The spread() function converts tidy data to wide data.
		-- The first argument tells spread which variables will be used as the column names.
		-- The second argument specifies which variables to use to fill out the cells.
			# spread tidy data to generate wide data
			new_wide_data <- new_tidy_data %>% spread(year, fertility)
			select(new_wide_data, country, `1960`:`1967`)

Separate and Unite
	- The separate()function splits one column into two or more columns at a specified character that separates the variables.
		-- 1. the name of the column to be separated
		-- 2. the names to be used for the new columns
		-- 3. the character that separates the variables
		-- e.g.		# separate on underscores
						dat %>% separate(key, c("year", "variable_name"), "_")
					# split on first underscore but keep life_expectancy merged
						dat %>% separate(key, c("year", "variable_name"), sep = "_", extra = "merge")
	- When there is an extra separation in some of the entries, use fill="right" to pad missing values with NAs, or use extra="merge" to keep extra elements together.
	- The unite() function combines two columns and adds a separating character.
		-- dat %>% 
			separate(key, c("year", "first_variable_name", "second_variable_name"), fill = "right") %>%
			unite(variable_name, first_variable_name, second_variable_name, sep="_")

Combining Tables:
	- The join functions in the dplyr package combine two tables such that matching rows are together.
	- left_join() only keeps rows that have information in the first table.
	- right_join() only keeps rows that have information in the second table.
	- inner_join() only keeps rows that have information in both tables.
	- full_join() keeps all rows from both tables.
	- semi_join() keeps the part of first table for which we have information in the second.
	- anti_join() keeps the elements of the first table for which there is no information in the second.

Binding:
	- Unlike the join functions, the binding functions do not try to match by a variable, but rather just combine datasets.
	- bind_cols() binds two objects by making them columns in a tibble. The R-base function cbind() binds columns but makes a data frame or matrix instead.
	- The bind_rows() function is similar but binds rows instead of columns. The R-base function rbind() binds rows but makes a data frame or matrix instead.

Set Operators:
	- By default, the set operators in R-base work on vectors. If tidyverse/dplyr are loaded, they also work on data frames.
	- You can take intersections of vectors using intersect(). This returns the elements common to both sets.
	- You can take the union of vectors using union(). This returns the elements that are in either set.
	- The set difference between a first and second argument can be obtained with setdiff(). Note that this function is not symmetric.
	- The function set_equal() tells us if two sets are the same, regardless of the order of elements.

Web Scraping:
	- Web scraping is extracting data from a website.
	- The rvest web harvesting package includes functions to extract nodes of an HTML document: html_nodes() extracts all nodes of different types, and html_node() extracts the first node.
	- html_table() converts an HTML table to a data frame.
		# import a webpage into R
		library(rvest)
		url <- "https://en.wikipedia.org/wiki/Murder_in_the_United_States_by_state"
		h <- read_html(url)
		tab <- h %>% html_nodes("table")
		tab <- tab[[2]]
		tab <- tab %>% html_table
		tab <- tab %>% setNames(c("state", "population", "total", "murders", "gun_murders", "gun_ownership", "total_rate", "murder_rate", "gun_murder_rate"))

String Processing
	- using stringr package (included in tidyverse)
	- https://rafalab.github.io/dsbook/string-processing.html#stringr
	- Define a string by surrounding text with either single quotes or double quote
	- cat() - function displays a string as it is represented inside R
	- To include a double quote inside of a string surrounded by double quotes, use the backslash (\) to escape the double quote. Escape a single quote to include it inside of a string defined by single quotes

	- str_detect() - function to determine whether a string contains a certain pattern
	- str_replace_all() - function to replace all instances of one pattern with another pattern. To remove a pattern, replace with the empty string ("")
	- parse_number() - function removes punctuation from strings and converts them to numeric
	- mutate_at() performs the same transformation on the specified column numbers.

Regex
	- A regular expression (regex) is a way to describe a specific pattern of characters of text. A set of rules has been designed to do this specifically and efficiently.
	- stringr functions can take a regex as a pattern.
	- str_detect() indicates whether a pattern is present in a string.
	- The main difference between a regex and a regular string is that a regex can include special characters.
	- The | symbol inside a regex means "or".
		- e.g. str_detect(s, "cm|inches")
	- Use '\\d' to represent digits. The backlash is used to distinguish it from the character 'd'. In R, you must use two backslashes for digits in regular expressions; in some other languages, you will only use one backslash for regex special characters.
	- str_view() highlights the first occurrence of a pattern, and the str_view_all() function highlights all occurrences of the pattern.
	- str_subset - show all strings that include a certain pattern

	- Square brackets define character classes: groups of characters that count as matching the pattern. You can use ranges to define character classes, such as [0-9] for digits and [a-zA-Z] for all letters.
		- str_view(s, "[56]") - # [56] means 5 or 6
		- str_detect(s, "[4-7]") - # [4-7] means 4, 5, 6 or 7
	- Anchors define patterns that must start or end at specific places. ^ and $ represent the beginning and end of the string respectively.
		- pattern <- "^\\d$" - # ^ means start of string, $ means end of string
	- Curly braces are quantifiers that state how many times a certain character can be repeated in the pattern. \\d{1,2} matches exactly 1 or 2 consecutive digits.
		- pattern <- "^\\d{1,2}$"
	- # combining character class, anchors and quantifier --> pattern <- "^[4-7]'\\d{1,2}\"$"

Search and replace with Regex
	- str_replace() replaces the first instance of the detected pattern with a specified string.
	- Spaces are characters and R does not ignore them. Spaces are specified by the special character \\s.
	- Additional quantifiers include *, + and ?. * means 0 or more instances of the previous character. ? means 0 or 1 instances. + means 1 or more instances.
		- none_or_more = str_detect(yes, "A1*B") --> none or more
           	- nore_or_once = str_detect(yes, "A1?B") --> none ore once
           	- once_or_more = str_detect(yes, "A1+B") --> one or more
	- Before removing characters from strings with functions like str_replace() and str_replace_all(), consider whether that replacement would have unintended effects.

Groups with Regex
	- Groups are defined using parentheses.
	- Once we define groups, we can use the function str_match() to extract the values these groups define. str_extract() extracts only strings that match a pattern, not the values defined by groups.
	- You can refer to the ith group with \\i. For example, refer to the value in the second group with \\2
		- pattern_without_groups <- "^[4-7],\\d*$"
		- pattern_with_groups <-  "^([4-7]),(\\d*)$"

pattern_with_groups <-"^([4-7])\\s*[,\\.\\s+]\\s*(\\d*)$"
	- ^ --> start of the string
	- [4-7] --> one digit, either 4,5,6,7
	- \\s* --> none or more with white space
	- [,\\.\\s+] --> ffet symbol is either , . or at least one space
	- \\s* --> none or more with white space
	- (\\d*) --> none or more digits
	- $ --> end of the string

Separate with Regex
	- The extract() - function behaves similarly to the separate() function but allows extraction of groups from regular expressions.
	- str_trim() - remove space at the beginning and end
	- str_to_lower() - make all strings lower case

String Splitting
	- The function str_split() splits a string into a character vector on a delimiter (such as a comma, space or underscore). By default, str_split() generates a list with one element for each original string. Use the function argument simplify=TRUE to have str_split() return a matrix instead.
		- str_split(lines, ",") 
	- The map() function from the purrr package applies the same function to each element of a list. To extract the ith entry of each element x, use map(x, i).
	- map() always returns a list. Use map_chr() to return a character vector and map_int() to return an integer

Recoding
	- Change long factor names with the recode() function from the tidyverse. 
	- Other similar functions include recode_factor() and fct_recoder() in the forcats package in the tidyverse. The same result could be obtained using the case_when() function, but recode() is more efficient to write.
		- gapminder %>% filter(region=="Caribbean") %>%
					mutate(country = recode(country, 
                          			'Antigua and Barbuda'="Barbuda",
                          			'Dominican Republic' = "DR",
                          			'St. Vincent and the Grenadines' = "St. Vincent",
                          			'Trinidad and Tobago' = "Trinidad"))

Dates, Times, and Text Mining Overview
	- Dates are a separate data type in R.The tidyverse includes functionality for dealing with dates through the lubridate package. 
	- Extract the year, month and day from a date object with the year(), month() and day() functions.
	- Parsers convert strings into dates with the standard YYYY-MM-DD format (ISO 8601 format). Use the parser with the name corresponding to the string format of year, month and day (ymd(), ydm(), myd(), mdy(), dmy(), dym()).
	- Get the current time with the Sys.time() function. Use the now() function instead to specify a time zone.
	- You can extract values from time objects with the hour(), minute() and second() functions.
	- Parsers convert strings into times (for example, hms()). Parsers can also create combined date-time objects (for example, mdy_hms()).